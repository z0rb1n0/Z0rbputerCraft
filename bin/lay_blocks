


os.loadAPI("/" .. fs.getDir(shell.getRunningProgram()) .. "/../lib/inventory");
os.loadAPI("/" .. fs.getDir(shell.getRunningProgram()) .. "/../lib/navigation");


local argv = { ... };
local block_name = argv[1];
local size_x = tonumber(argv[2]);
local size_y = tonumber(argv[3]);
local block_stride_x = tonumber(argv[4]);
local block_stride_y = tonumber(argv[5]);
local initial_step_x = tonumber(argv[6]);
local initial_step_y = tonumber(argv[7]);


	if (initial_step_x == nil) then initial_step_x = 1; end;
	if (initial_step_y == nil) then initial_step_y = 1; end;
	if (block_stride_x == nil) then	block_stride_x = 1;	end;
	if (block_stride_y == nil) then	block_stride_y = 1;	end;
	

	if (
		(block_name == nil) or
		((size_x == nil) or (size_x < 1)) or
		((size_y == nil) or (size_y < 1)) or
		((initial_step_y == nil) or (initial_step_y < 0)) or
		((initial_step_x == nil) or (initial_step_x < 0)) or
		((block_stride_x == nil) or (block_stride_x < 0)) or
		((block_stride_y == nil) or (block_stride_y < 0))
	) then
		print("Usage:");
		print("    lay_blocks <block_name> <size_x> <size_y> [ block_stride_x = 1 [ block_stride_y = 1 [ initial_step_x = 1 [ initial_step_y = 1 ]]]]");
		print("");
		print("(size/stride values must be positive, step values must be nonnegative)");
		return 1;
	end;


	print("Checking for sufficient resources");
	-- plain division. if there's a remainder, that counts as another row
	local columns_count = math.floor(size_x / block_stride_x); if ((size_x % block_stride_x) > 0) then columns_count = (columns_count + 1); end;
	local rows_count = math.floor(size_y / block_stride_y); if ((size_y % block_stride_y) > 0) then rows_count = (rows_count + 1); end;

	local items_available = inventory.count_items(block_name)
	print("    " ..  rows_count .. " rows");
	print("    " ..  columns_count .. " columns");
	print("    " ..  (columns_count * rows_count) .. " total blocks needed");
	print("    " ..  items_available .. " blocks available");
	

	if (items_available < math.floor(math.floor((size_x * size_y) / block_stride_x) / block_stride_y)) then
		print("Insufficient blocks of the specified type for the area size and stride");
		return false;
	end;

	
	print("Going one level higher and moving to initial square");
	navigation.dig_and_go("U");
	navigation.offset_force_z(0); -- this doesn't count

	local step_loop;
	-- let's move ahead as much as it takes
	if (initial_step_y > 0) then
		for step_loop = 1, initial_step_y do
			navigation.dig_and_go("N");
			navigation.offset_force_y(0); -- this doesn't count
		end;
	end;

	if (initial_step_x > 0) then
		for step_loop = 1, initial_step_x do
			navigation.dig_and_go("E");
			navigation.offset_force_x(0); -- this doesn't count
		end;
	end;

	print("Laying down " .. size_x .. "x" .. size_y .. "`" .. block_name .. "` every " .. block_stride_x .. "x and " .. block_stride_y .. "y");


	local low_fuel = false;
	local layer_complete = false;
	local returning_y = false;
	local returning_x = false;
	
	local curr_offset_x = 0;
	local curr_offset_y = 0;

	-- we stop if:
	--  - we're finished
	--  - we've got just enough fuel to get back to origin

	local shift_loop;

	while (not (layer_complete)) do

		-- we store these not to make too many calls
		curr_offset_x = navigation.offset_get_x();
		curr_offset_y = navigation.offset_get_y();


		-- unfortunately we need to check if we still have blocks in our slot on every loop
		local curr_item = inventory.current_item();

		if ((curr_item == nil) or (string.upper(inventory.current_item()) ~= "block_name")) then
			print("Slot " .. turtle.getSelectedSlot() .. " ran out of `" .. block_name .. "` in the current slot. Switching to the next available stack");
			turtle.select(inventory.find_item(block_name));
		end;


		-- if all is well below, we plant the sapling
		if (turtle.detectDown()) then
			print("Block below is occupied at offset " .. curr_offset_x .. ":" .. curr_offset_y .. ". Skipping");
		else
			turtle.placeDown();
		end;


		-- did we just complete a column?
		if ((returning_y and (curr_offset_y == 0)) or ((not returning_y) and ((curr_offset_y + block_stride_y) > (size_y - 1)))) then
			-- Yes we are. did we just complete a row too?
			if ((returning_x and (curr_offset_x == 0)) or ((not returning_x) and ((curr_offset_x + block_stride_y) > (size_x - 1)))) then

				-- we just completed a column AND a row. Time to invert everything and loop out.
				returning_y = (not returning_y);
				returning_x = (not returning_x);
				layer_complete = true;

				-- we also ditch all the rubbish and refuel if possible/needed
				print("Layer complete. Refueling");

				local slot_idx;
				local slot_info;

				for slot_idx = 1, 16 do

					turtle.select(slot_idx);
					slot_info = turtle.getItemDetail(slot_idx);
					previous_fuel_level = turtle.getFuelLevel();

					if (slot_info) then
						if (navigation.blacklisted_fuels[string.upper(slot_info.name)] == nil) then
							if (previous_fuel_level < (turtle.getFuelLimit() / 2)) then
								-- we refuel if possible, desirable and needed
								if (turtle.refuel()) then
									print("Refueled " .. (turtle.getFuelLevel() - previous_fuel_level) .. " units from slot " .. slot_idx .. " (" .. slot_info.name ..")");
									print("New fuel level: " .. turtle.getFuelLevel());
								end;
							end;
						else
							print("Fuel `" .. slot_info.name .. "` at slot " .. slot_idx .. " is blacklisted");
						end;
					end;


				end;
			else

				for shift_loop = 1, block_stride_x do
					-- this is just the end of a column. We just shift one column and invert N/S
					if (returning_x) then
						navigation.dig_and_go("W");
					else
						navigation.dig_and_go("E");
					end;
				end;
				returning_y = (not returning_y);
			end;
		else
			-- no. keep laying N/S
			for shift_loop = 1, block_stride_y do
				if (returning_y) then
					navigation.dig_and_go("S");
				else
					navigation.dig_and_go("N");
				end;
			end;
		end;


		if (turtle.getFuelLevel() < (initial_step_x + initial_step_y + math.abs(curr_offset_x) + math.abs(curr_offset_y))) then
			low_fuel = true;
			print("Fuel level barely sufficient to return to base. Returning to starting point");
		end;
		
	end;

	navigation.back_to_start();

	-- let's move back to the starting point
	if (initial_step_x > 0) then
		for step_ahead_loop = 1, initial_step_x do
			navigation.dig_and_go("W");
		end;
	end;
	if (initial_step_y > 0) then
		for step_ahead_loop = 1, initial_step_y do
			navigation.dig_and_go("S");
		end;
	end;
	navigation.heading_set("N");
	navigation.dig_and_go("D");
