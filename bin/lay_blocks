


os.loadAPI("/" .. fs.getDir(shell.getRunningProgram()) .. "/../lib/crutch");
os.loadAPI("/" .. fs.getDir(shell.getRunningProgram()) .. "/../lib/entities");
os.loadAPI("/" .. fs.getDir(shell.getRunningProgram()) .. "/../lib/inventory");
os.loadAPI("/" .. fs.getDir(shell.getRunningProgram()) .. "/../lib/navigation");


local argv = { ... };
local block_name = argv[1];
local number_x = tonumber(argv[2]);
local number_y = tonumber(argv[3]);
local stride_x = tonumber(argv[4]);
local stride_y = tonumber(argv[5]);
local initial_step_x = tonumber(argv[6]);
local initial_step_y = tonumber(argv[7]);


	initial_step_x = crutch.coalesce(initial_step_x, 0);
	initial_step_y = crutch.coalesce(initial_step_y, 0);
	stride_x = crutch.coalesce(stride_x, 1);
	stride_y = crutch.coalesce(stride_y, 1);

	if (
		(block_name == nil) or
		((number_x == nil) or (number_x < 1)) or
		((number_y == nil) or (number_y < 1)) or
		((initial_step_y == nil) or (initial_step_y < 0)) or
		((initial_step_x == nil) or (initial_step_x < 0)) or
		((stride_x == nil) or (stride_x < 0)) or
		((stride_y == nil) or (stride_y < 0))
	) then
		print("Usage:");
		print("    lay_blocks <block_name> <number_x> <number_y> [ stride_x = 1 [ stride_y = 1 [ initial_step_x = 1 [ initial_step_y = 1 ]]]]");
		print("");
		print("(size/stride values must be positive, initial step values must be nonnegative)");
		return 1;
	end;

	-- we fix the path once and for all
	block_name = entities.canonicalize(block_name);

	print("Checking for sufficient resources");
	local total_items = (number_x * number_y);

	local items_available = inventory.count_items(block_name)
	print("    " ..  total_items .. " total blocks needed");
	print("    " ..  items_available .. " blocks available");


	if (items_available < (number_y * number_x)) then
		print("Insufficient blocks of type `" .. block_name .. "` in inventory");
		return false;
	end;

	print("Going one level higher and positoning at 0, 0");
	navigation.dig_and_go("U");
	navigation.offset_force_z(0); -- this doesn't count

	
	local step_loop;

	-- let's move ahead and sideways as much as it takes
	if (initial_step_y > 0) then
		for step_loop = 1, initial_step_y do
			navigation.dig_and_go("N");
			navigation.offset_force_y(0); -- this doesn't count
		end;
	end;

	if (initial_step_x > 0) then
		for step_loop = 1, initial_step_x do
			navigation.dig_and_go("E");
			navigation.offset_force_x(0); -- this doesn't count
		end;
	end;

	print("Laying down " .. number_x .. "x" .. number_y .. "`" .. block_name .. "` every " .. stride_x .. "x and " .. stride_y .. "y");


	local low_fuel = false;
	local layer_complete = false;
	local returning_y = false;
	local returning_x = false;
	
	local curr_block_x = 0;
	local curr_block_y = 0;

	-- we stop if:
	--  - we're finished
	--  - we've got just enough fuel to get back to origin


	curr_block_x = 0;
	curr_block_y = 0;
	local shift_loop;

	while (not (layer_complete or low_fuel)) do

		-- unfortunately we need to check if the correct item is selected at every loop
		local curr_item = inventory.current_item();

		if ((curr_item == nil) or (inventory.current_item() ~= block_name)) then
			print("Slot " .. turtle.getSelectedSlot() .. " ran out of `" .. block_name .. "` in the current slot. Switching to the next available stack");
			turtle.select(inventory.find_item(block_name));
		end;

		-- if all is well below, we plant the block
		if (turtle.detectDown()) then
			print("Block below is occupied at offset " .. curr_block_x .. ":" .. curr_block_y .. ". Skipping");
		else
			turtle.placeDown();
		end;

		-- did we just complete a column?
		if ((returning_y and (curr_block_y == 0)) or ((not returning_y) and (curr_block_y >= (number_y - 1)))) then

			-- Did we just complete a row too?
			if ((returning_x and (curr_block_x == 0)) or ((not returning_x) and (curr_block_x >= (number_x - 1)))) then

				-- we just completed a column AND a row.
				returning_x = (not returning_x);

				-- As soon as a single layer is complete, we end
				layer_complete = true;

				-- we also refuel if possible/needed
				print("Layer complete. Refueling");

				local slot_idx;
				local slot_info;

				for slot_idx = 1, 16 do

					turtle.select(slot_idx);
					slot_info = turtle.getItemDetail(slot_idx);
					previous_fuel_level = turtle.getFuelLevel();

					if (slot_info) then
						if (navigation.blacklisted_fuels[string.upper(slot_info.name)] == nil) then
							if (previous_fuel_level < (turtle.getFuelLimit() - 5000)) then
								-- we refuel if possible, desirable and needed
								if (turtle.refuel()) then
									print("Refueled " .. (turtle.getFuelLevel() - previous_fuel_level) .. " units from slot " .. slot_idx .. " (" .. slot_info.name ..")");
									print("New fuel level: " .. turtle.getFuelLevel());
								end;
							end;
						else
							print("Fuel `" .. slot_info.name .. "` at slot " .. slot_idx .. " is blacklisted");
						end;
					end;


				end;

			else

				-- this is just the end of a column. We just strafe one stride east
				-- and invert the Y sweep direction
				for shift_loop = 1, stride_x do
					navigation.dig_and_go("E");
				end;
				curr_block_x = (curr_block_x + 1);
				returning_y = (not returning_y);

			end;
		else

			-- still in the middle of a column. We keep going
			local next_step_dir = "N";
			local y_motion = 1;
			if returning_y then
				next_step_dir = "S";
				y_motion = -1;
			end;
			for shift_loop = 1, stride_y do
				navigation.dig_and_go(next_step_dir);
			end;
			curr_block_y = (curr_block_y + y_motion);

		end;



		if (turtle.getFuelLevel() <= (initial_step_x + initial_step_y + navigation.offset_get_x() + navigation.offset_get_y() + navigation.offset_get_z())) then
			low_fuel = true;
			print("Fuel level barely sufficient to return to base. Returning to starting point");
		end;
		
	end;

	navigation.back_to_start();

	-- let's move back to the starting point
	if (initial_step_x > 0) then
		for step_ahead_loop = 1, initial_step_x do
			navigation.dig_and_go("W");
		end;
	end;
	if (initial_step_y > 0) then
		for step_ahead_loop = 1, initial_step_y do
			navigation.dig_and_go("S");
		end;
	end;
	navigation.heading_set("N");
	navigation.dig_and_go("D");
