# library of functions that allow navigation

-- burning logs is not desirable as we might me mining them
if (not blacklisted_fuels) then
	blacklisted_fuels = {
		["MINECRAFT:LOG"] = true,
		["MINECRAFT:LOG2"] = true,
		["MINECRAFT:SAPLING"] = true
	};
end;

-- we initialize everything
if (heading == nil) then

	heading = 0;
	offset_x = 0;
	offset_y = 0;
	offset_z = 0;

end;



function heading_get()
	return heading;
end;

function heading_force(new_heading)

	if (new_heading == "N") then
		heading = 0;
	elseif (new_heading == "E") then
		heading = 90;
	elseif (new_heading == "S") then
		heading = 180;
	elseif (new_heading == "W") then
		heading = 270;
	else
		print("Invalid heading: " .. new_heading);
		return false;
	end;
	
	return true;

end;

function heading_set(direction)
ret_val = nil;


	local target_heading = nil;

	-- we adjust the direction
	if (direction == "N") then
		target_heading = 0;
	elseif (direction == "E") then
		target_heading = 90;
	elseif (direction == "S") then
		target_heading = 180;
	elseif (direction == "W") then
		target_heading = 270;
	end

	if (target_heading == nil) then
		print( "Direction must be one of the following N, S, E, W");
		return false;
	end;


	-- we do the shortest rotation. Some normalization is required
	local heading_difference = (target_heading - heading);
	if (heading_difference > 180) then
		heading_difference = (heading_difference - 360);
	elseif (heading_difference < -180) then
		heading_difference = (heading_difference + 360);
	end;

	if (heading_difference ~= 0) then
	
		while (heading_difference ~= 0) do

			if (heading_difference < 0) then
				turtle.turnLeft()
				heading_difference = (heading_difference + 90);
			else
				turtle.turnRight()
				heading_difference = (heading_difference - 90);
			end;

		end;
		
		if (ret_val == nil) then
			heading = (target_heading % 360); -- we normalize the angles from 0 to 360
			--print("Heading set to " .. heading .. " degrees");
		else
			print("Failed to set turtle heading");
			return false;
		end;
	end;
	
	ret_val = true;
	
	return ret_val;
end;



-- getters/setters 'cause apparently member variables are not accessible
-- in loadAPI'd files
function offset_get_x()
	return offset_x;
end;

function offset_get_y()
	return offset_y;
end;

function offset_get_z()
	return offset_z;
end;


function offset_force_x(new_offset)
	offset_x = new_offset;
	return true;
end;

function offset_force_y(new_offset)
	offset_y = new_offset;
	return true;
end;

function offset_force_z(new_offset)
	offset_z = new_offset;
	return true;
end;


-- scans the supplied direction (initials for forward, up and down) and if there is a block there
-- attempts to dig it. If the block happens to be lava or flowing lava with metadata 0 (source block)
-- and there is an empty bucket in the inventory, the lava is immediately collected and converted into fuel.
-- This happens even in case the tank is already full as it'd be wasted anyway
-- In order not to break digging loops, returns true if an attempt is made to dig into air
function greedy_dig(direction)
ret_val = nil;

	if (direction == nil) then
		w_dir = "";
	else
		w_dir = string.upper(direction);
	end;

	-- the function changes based on the direction
	local f_inspect; local f_dig;
	if (w_dir == "F") then
		f_inspect = turtle.inspect
		f_dig = turtle.dig
		f_place = turtle.place
	elseif (w_dir == "U") then
		f_inspect = turtle.inspectUp
		f_dig = turtle.digUp
		f_place = turtle.placeUp
	elseif(w_dir == "D") then
		f_inspect = turtle.inspectDown
		f_dig = turtle.digDown
		f_place = turtle.placeDown
	else
		print("Invalid direction for greedy digging (" .. w_dir .. ")");
		return false;
	end;
	local ss; local si;
	ss, si = f_inspect();

	if (ss and si) then
	
		if ((si.name == "minecraft:lava") or (si.name == "minecraft:flowing_lava")) then

			if (si.metadata == 0) then

				-- Lava. Lava is good
				local refueled_with_lava = false;

				print("Lava source block detected (" .. w_dir .. "). Looking for an empty bucket...");

				local bucket_slot = inventory.find_item("bucket");
				if (not (bucket_slot == nil)) then
					if (turtle.select(bucket_slot)) then
						print("...found. Using to refuel...");
						f_place();
						if (turtle.refuel()) then
							refueled_with_lava = true;
							print("...OK. New fuel level: " .. turtle.getFuelLevel());
						else
							print("...failed");
						end;
					else
						print("...could select the empty bucket");
					end;
				else
					print("...could not find an empty bucket");
				end;
			
				if (not refueled_with_lava) then
					print("Something went wrong with lava refuel");
					print("We're forced to skip this one :-(");
				end;

			end;
			ret_val = true;

		elseif ((si.name == "minecraft:water") or (si.name == "minecraft:flowing_water")) then
			-- water does not get a special treatment other than being ignored
			ret_val = true;
		else

			-- we just proceed with the digging.
			while (not f_dig()) do
				print("Could not dig (" .. w_dir .. " - " .. si.name .. "). Waiting 10 seconds and trying again");
				sleep(10);
			end;
			ret_val = true;

		end;

	else
		-- this is air. all good
		ret_val = true;
	end;


	return ret_val;
end;


-- Possible values of "direction" relative to the local grid pictured above,
-- and NOT the global world:
--  Valid directions:
--   N, S, E, W, U, D

-- The process could be made MUCH faster by using digUp and digDown, however that would not
-- remove water and lava from the volume as those can only be removed by the turtle running through them,
-- using a bucket or placing a block
function dig_and_go(direction)
local ret_val = nil;

	local w_dir = "";
	if (not (direction == nil)) then
		if (string.find(string.upper(direction), "^[DENSUW]$")) then
			w_dir = string.upper(direction);
		end;
	end;
	if (w_dir == "") then
		print("Invalid direction (" .. w_dir .. ")");
		return false;
	end;


	while ((ret_val == nil) or (not ret_val)) do

		if (string.find(string.upper(w_dir), "^[DU]$") == nil) then

		
			if (not heading_set(w_dir)) then
				print("Call to `heading_set()` failed");
				return false;
			end;

			-- we dig ahead and go there
			navigation.greedy_dig("F");

			if (turtle.forward()) then
				if (heading == 0) then
					offset_y = (offset_y + 1);
				elseif (heading == 90) then
					offset_x = (offset_x + 1);
				elseif (heading == 180) then
					offset_y = (offset_y - 1);
				elseif (heading == 270) then
					offset_x = (offset_x - 1);
				end;
				ret_val = true;
			else
				print("Failed to move ahead");
				return false;
			end;

		else

			-- up and down have different semantics (movement must be handled manually)
			navigation.greedy_dig(w_dir);

			if (w_dir == "U") then
				if (turtle.up()) then
					offset_z = (offset_z + 1);
					ret_val = true;
				else
					print("Failed to move up");
					return false;
				end;
			elseif (w_dir == "D") then
				if (turtle.down()) then
					offset_z = (offset_z - 1);
					ret_val = true;
				else
					print("Failed to move down");
					return false;
				end;
			end;
		end;

		
		if (ret_val ~= true) then
			print("Movement order failed. Enforcing a one second sleep and trying again");
			sleep(1);
		end;
	end;

	return ret_val;
end


function back_to_start()
	while (offset_z ~= 0) do
		if (offset_z < 0) then
			dig_and_go("U");
		else
			dig_and_go("D");
		end;
	end;

	while (offset_x ~= 0) do
		if (offset_x < 0) then
			dig_and_go("E");
		else
			dig_and_go("W");
		end;
	end;

	while (offset_y ~= 0) do
		if (offset_y < 0) then
			dig_and_go("N");
		else
			dig_and_go("S");
		end;
	end;
	

end;